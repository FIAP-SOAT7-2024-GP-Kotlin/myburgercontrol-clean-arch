name: CI [MyBurguer ≡]

on:
  push:
    branches: [ "feature/actions" ]
  pull_request:
    branches: [ "feature/actions" ]

jobs:

  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout sources
      uses: actions/checkout@v4
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: 21

    - name: Setup Gradle [MyBurguer ≡]
      uses: gradle/actions/setup-gradle@v3
      with:
        build-scan-publish: true
        build-scan-terms-of-use-url: "https://gradle.com/terms-of-service"
        build-scan-terms-of-use-agree: "yes"

    - name: Run build [MyBurguer ≡]
      run: ./gradlew clean build --no-daemon -x test
        
    - name: Run tests [MyBurguer ≡]
      run: ./gradlew test --info --stacktrace

    - name: Upload Test Results [MyBurguer ≡]
      if: failure()
      uses: actions/upload-artifact@v2
      with:
        name: test-reports
        path: build/reports/tests/test

    - name: Authentication Docker Hub [MyBurguer ≡]
      uses: docker/login-action@v3.2.0
      with:
        username: ${{secrets.DOCKERHUB_USER}}
        password: ${{secrets.DOCKERHUB_PWD}}

    - name: Build the Docker image [MyBurguer ≡]
      uses: docker/build-push-action@v6.0.0
      with:
        context: ./
        file: ./Dockerfile
        push: true
        tags: |
          fiapmyburguer/myburgercontrol-clean-arch:${{ github.run_id }}
          fiapmyburguer/myburgercontrol-clean-arch:latest

          
  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v2
      with:
        name: build

    - name: Copy files via SSH
      uses: appleboy/scp-action@v0.1.3
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USER }}
        key: ${{ secrets.SSH_KEY }}
        source: "build/libs/*.jar"
        target: "/path/to/deploy/directory/"

    - name: Restart server
      uses: appleboy/ssh-action@v0.1.3
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USER }}
        key: ${{ secrets.SSH_KEY }}
        script: |
          sudo systemctl restart myapp.service
  
