name: CD Pipeline with Terraform (DigitalOcean)

on:
  push:
    branches:
      - main
      - feature/start-deploy-actions
  pull_request:
    branches:
      - main
jobs:
  deploy:
    name: Deploy to DigitalOcean
    runs-on: ubuntu-latest

    steps:
      # Checkout do repositório
      - name: Checkout repository
        uses: actions/checkout@v4

      # Autenticação com a DigitalOcean
      - name: Set up DigitalOcean
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DO_TOKEN_ACCESS }}

      # Listar as VPCs e obter o ID da primeira VPC
      - name: Set up DigitalOcean
        run: |
          VPC_ID=$(doctl vpcs list --format ID --no-header | head -n 1)
          echo "VPC ID: $VPC_ID"
          echo "VPC_ID=$VPC_ID" >> $GITHUB_ENV

      # Criar um Droplet (opcional)
      - name: Create a Droplet
        run: |
          doctl compute droplet create --image docker-20-04 --size s-1vcpu-1gb --region nyc3 --vpc-uuid ${{ env.VPC_ID }} soat7myburger

      # Autenticação com o cluster Kubernetes
      - name: Set up Kubernetes
        run: |
          doctl kubernetes cluster kubeconfig save soat7myburger

      # Aplicar os manifests do Kubernetes ou usar Helm
      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f k8s/

      # Armazenar o nome do deployment na variável de ambiente
      - name: Get Deployment Name
        run: |
          DEPLOYMENT_NAME=$(kubectl get deployments -o jsonpath='{.items[0].metadata.name}')
          echo "DEPLOYMENT_NAME=$DEPLOYMENT_NAME" >> $GITHUB_ENV

      # Verificar o status dos pods
      - name: Check pod status
        run: kubectl rollout status deployment ${{ env.DEPLOYMENT_NAME }}
