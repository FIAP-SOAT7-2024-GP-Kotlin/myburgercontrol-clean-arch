name: CD [MyBurger ≡] (DigitalOcean)

on:
  push:
    branches:
      - main
      - feature/start-deploy-actions
jobs:
  deploy:
    name: Deploy to DigitalOcean
    runs-on: ubuntu-latest
    env:
       IMAGE_NAME: fiapmyburguer/myburgercontrol-clean-arch:latest

    steps:
      # Checkout do repositório
      - name: Checkout repository
        uses: actions/checkout@v4

      # Autenticação com a DigitalOcean
      - name: Set up DigitalOcean [MyBurger ≡]
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DO_TOKEN_ACCESS }}

      # Armazenar o ID do primeiro cluster na variável de ambiente
      - name: Get First Cluster ID [MyBurger ≡]
        run: |
          CLUSTER_ID=$(doctl kubernetes cluster list --format ID --no-header | head -n 1)
          echo "CLUSTER_ID=$CLUSTER_ID" >> $GITHUB_ENV

      # Autenticação com o cluster Kubernetes
      - name: Set up Kubernetes [MyBurger ≡]
        run: |
          doctl kubernetes cluster kubeconfig save ${{ env.CLUSTER_ID }}

      # Validar autenticação
      - name: Validate Auth [MyBurger ≡]
        run: |
          kubectl get nodes

      # Armazenar o Context do primeiro cluster na variável de ambiente
      - name: Get First Context [MyBurger ≡]
        run: |
          KUBE_CONTEXT=$(kubectl config get-contexts --no-headers | head -n 1 | awk '{print $2}')
          echo "KUBE_CONTEXT=$KUBE_CONTEXT" >> $GITHUB_ENV

      # Configura o contexto
      - name: Config context [MyBurger ≡]
        run: |
          kubectl config use-context ${{ env.KUBE_CONTEXT }}

      # Aplicar os manifests do Kubernetes
      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f k8s/app/myburger-configmap.yaml
          kubectl apply -f k8s/app/myburger-secret.yaml
          kubectl apply -f k8s/app/myburger-deployment.yaml
          kubectl apply -f k8s/app/myburger-hpa.yaml
          kubectl apply -f k8s/app/myburger-svc.yaml

      # Armazenar o nome do deployment na variável de ambiente
      - name: Get Deployment Name [MyBurger ≡]
        run: |
          kubectl get deployments
          DEPLOYMENT_NAME=$(kubectl get deployments --namespace=default -o jsonpath='{.items[0].metadata.name}')
          echo "DEPLOYMENT_NAME=$DEPLOYMENT_NAME" >> $GITHUB_ENV

      # Atualizar a imagem do deployment
      - name: Update Image [MyBurger ≡]
        run: |
          kubectl set image deployment/${{ env.DEPLOYMENT_NAME }} myburger=${{ env.IMAGE_NAME }}

      # Verificar o status dos pods
      - name: Check pod status [MyBurger ≡]
        run: |
          kubectl rollout status deployment/${{ env.DEPLOYMENT_NAME }}

      # Ver logs dos pods atualizados
      - name: View Logs [MyBurger ≡]
        run: |
          kubectl logs -l app=${{ env.DEPLOYMENT_NAME }} --tail=100
